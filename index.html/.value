<head>
  <title>コレクション管理</title>
  <meta charset="utf-8"/>
</head>
<body>
  <div id="main"></div>

  <script>
  const start = async ask=>{
    await ask(`await checkout("Database");`);
    await ask(`await change("user/seresonn_no9@yahoo.co.jp/echo");`);
    document.querySelector("#main").innerText = await ask(`await catenate();`);
  };

  const COMMAND_LOG = true; // ログ出力
  const bgf_color = (bg='white',f='black')=>`color:${f};background-color:${bg};`;
  const output_log = (target=null, style=bgf_color("#335","#DDE"))=>{
    if(typeof target==='object') target = JSON.stringify(target);
    console.log(`%c${target}`, style);
  };

  const str_var = str=>(new Function("return " + str))(); // ただの文字列をJSに変換
  const remove_prompt = m=>{ // プロンプト用の出力削除
    m = m.split("\n"); m.pop(); m = m.join("\n");
    return str_var(m);
  };

  let server = null;
  let opened = false;
  let ask = null;
  window.onload = function(){
    server = new WebSocket(`ws://${this.location.host}/repl`);
    ask = async q=>{
      if(!opened || !server) return null;
      server.send(q);
      if(COMMAND_LOG) output_log(`$ ${q}`);
      return await new Promise((res,rej)=>{
        server.onmessage = function(e){
          m = remove_prompt(e.data);
          if(typeof m!=='undefined'){
            if(COMMAND_LOG) output_log(m);
            res(m);
          }
        };
      });
    };
    server.onopen = async function(e){
      opened=true;
      console.log(`ws://${location.host}/repl connected!`);
      await start(ask);
    };
    server.onclose = async function(e){
      opened=false;
      console.log(`ws://${location.host}/repl disconnected!`);
    };
  };
  </script>


  <!-- Terminal -->
  <div class="Terminal component object">
    <style>
    .tarminal{
      position: relative;
      left: 0px;
      top: 0px;
      background-color: white;
      width: 480px;
      height: 320px;
      min-width: 80px;
      min-height: 80px;
      overflow: auto;
      resize: both;
    }
    .tarm-win{
      background-color: black;
      color: white;
      height: calc(100% - 30px);
      border: none;
      outline: 0;
      border-left: solid 5px #000;
      resize: none;
      letter-spacing: 1px;
      font-size: 12px;
      overflow-y: scroll;
    }
    .tarm-url{
      width:calc(80% - 17px);
      outline:0;
      height:17px;
      color:#555;
      border-size:1px;
    }
    .tarm-btn{
      width:20%;
      border:none;
      height:17px;
      padding:0px;
      outline:0;
      background-color: #C88;
      cursor: pointer;
      font-weight: bold;
      color: white;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .tarm-btn.open{
      background-color: #8C8;
    }
    .tarm-menu{
      display: inline-block;
      vertical-align: top;
      width: 15px;
      height: 15px;
      background-color: #000;
      cursor: move;
      border: solid 1px #CCC;
      text-align: center;
      user-select: none;
    }
    .tarm-text{
      height: 13px;
      background-color: #CCC;
      color: #333;
      font-size: 10px;
      padding-left: 5px;
    }
    </style>

    <script>
    ContentEditableControll = {
      resetSelect: function(dom, _callback){
        dom.focus();
        const selection = document.getSelection();
        const bk_range = selection.getRangeAt(0).cloneRange();
        const result = _callback(selection);
        selection.removeAllRanges();
        selection.addRange(bk_range);
        return result;
      },
      getText: function(dom){
        dom.focus();
        return this.resetSelect(dom, function(selection){
          selection.selectAllChildren(dom);
          return selection.toString();
        });
      },
      addText: function(dom, text){
        dom.focus();
        document.execCommand('inserttext', false, text);
      },
      getPos: function(dom=null){
        dom.focus();
        const before_text = this.resetSelect(dom, function(selection){
          if(!dom.childNodes.length) return "";
          selection.getRangeAt(0).setStart(dom.childNodes[0], 0);
          return selection.toString();
        });
        return before_text.length;
      },
      setPos: function(dom=null, pos=0){
        if(!dom) return;
        dom.focus();

        const text = this.getText(dom);
        const text_list = this.getText().split("\n");

        // 指定文字数が異常値
        if(typeof pos != "number") pos = 0; //数値化
        if(pos < 0) pos *= -1; //正負反転
        if(pos > text.length) pos = text.length; // 最大値

        // 指定文字数のノードと文字数を求める
        const before_text = text.substr(0, pos);
        const before_text_list = before_text.split("\n");
        const br_count = before_text_list.length-1;
        const surplus = before_text_list[br_count].length;
        const node = dom.childNodes[br_count];

        const parent = !!node.childNodes.length ? node.childNodes[0] : node;
        const offset = surplus;

        // 選択位置を移動させる
        // https://javascript.info/selection-range
        //console.log(parent, offset);
        document.getSelection().collapse(parent, offset);
        return {parent: parent, offset: offset};
      },
    };
    CEC = ContentEditableControll;

    setTerminalUI = tarminal=>{ // set textarea
      const dom = tarminal.querySelector(".tarm-win");
      const header = tarminal.querySelector(".tarm-header");
      const KEY_CODE = {
        ENTER: 13,
        BACKSPACE: 8,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
      };
      const getText = ()=>CEC.getText(dom);
      const addText = text=>CEC.addText(dom, text);
      const setCursor = pos=>CEC.setPos(dom, pos);
      const getCursor = ()=>CEC.getPos(dom);
      const getCommitCursor = ()=>parseInt(dom.dataset.commit_cursor);
      const setCommitCursor = n=>dom.dataset.commit_cursor=n;
      const setCancel = e=>e.preventDefault();
      const isBefore = (curr,diff=0)=>curr<getCommitCursor()+diff;
      const isString = str=>typeof str==="string";
      const stringToBool = str=>isString(str)? str.toLowerCase()==='true' : console.error("stringToBool：文字列ではありません");
      const getInputFlg = ()=>stringToBool(dom.dataset.input_flag);
      const setInputFlg = f=>dom.dataset.input_flag=f;
      const dispatchCustomEvent = (dom, name, params)=>dom.dispatchEvent(new CustomEvent(name, {detail:params}));
      const getCommitFlg = ()=>stringToBool(dom.dataset.commit_flag);
      const setCommitFlg = f=>dom.dataset.commit_flag=f;
      const setCommit = (str=null, option={})=>{
        option = Object.assign({warp: true, next_prefix: getPrefix()}, option);

        if(!getCommitFlg()) return false;
        if(str) addText( str + (option.warp? "\n" : "") );
        setCommitCursor( getCursor()+1 );
        addText(option.next_prefix);
        dom.scrollTop = dom.scrollHeight;
        dom.focus();
      };
      const getDate = str=>(str? new Date(str) : new Date()).toLocaleDateString();
      const getTime = str=>(str? new Date(str) : new Date()).toLocaleTimeString();
      const tarminal_preset = '$ ';
      const getPrefix = ()=>dom.dataset.prefix;
      const setPrefix = pre=>dom.dataset.prefix=pre;

      dom.dataset.prefix = tarminal_preset;
      dom.dataset.commit_cursor = 0; //確定文字数
      dom.dataset.input_flag = "true"; //入力可能フラグ
      dom.dataset.commit_flag = "true"; //コミット可能フラグ
      dom.addEventListener('keydown',function(e){
        const _input = e.keyCode;
        const _current = getCursor();

        if(!getInputFlg()) setCancel(e);
        if(_input==KEY_CODE["UP"] || _input==KEY_CODE["DOWN"]) setCancel(e);
        if((_input==KEY_CODE["BACKSPACE"] || _input==KEY_CODE["LEFT"]) && isBefore(_current)) setCancel(e);
        if(isBefore(_current+1)) {setCancel(e); return false;} // currentより上では入力させない
        if(_input==KEY_CODE["ENTER"]){
          const line = getText().split("\n").pop();
          const command = line.split(" ").slice(1).join(" ");
          dispatchCustomEvent(dom, "tarminal-commit", {command: command});
          setCommitFlg(false);
          if(getText().length!=getCursor()) setCursor(getText().length);
        }
      });
      dom.addEventListener('keyup',function(e){
        const _input = e.keyCode;
        const _current = getCursor();
        if(!getInputFlg()) setCancel(e);

        if(_input==KEY_CODE["ENTER"] && getText().slice(-1)=="\n"){
          setCommit();
          setInputFlg(true);
        }
      });
      dom.addEventListener('tarminal-commit', async function(e){
        if(tarminal.conf.connection){
          tarminal.conf.server.send(e.detail.command);
          setInputFlg(false);
        }
      });
      header.querySelector(".tarm-btn").addEventListener('click',function(e){
        const _url = header.querySelector(".tarm-url").value;
        if(false){ // URL構文のエラー未実装
          setCommit(`invalid url [${_url}] ${getDate()} ${getTime()}`);
        }else{
          const server = new WebSocket(_url);
          tarminal.conf.url = _url;
          tarminal.conf.server = server;

          //setCommit(`connection... [${_url}] ${getDate()} ${getTime()}`);
          server.onopen = function(e){
            tarminal.conf.connection = true;
            setPrefix('');
            setCommit(`connected [${_url}] ${getDate()} ${getTime()}`);
            tarminal.querySelector(".tarm-text").innerText = `connected! [${_url}] ${getDate()} ${getTime()}`;
            header.querySelector(".tarm-btn").classList.add("open");
            setInputFlg(true);
          };
          server.onmessage = function(e){
            setCommitFlg(true);
            if(e.data!="") setCommit(e.data, {warp: false});
            setInputFlg(true);
          };
          server.onclose = function(e){
            setPrefix(tarminal_preset);
            setCommit(`dis connected! [${tarminal.conf.url}] ${getDate()} ${getTime()}`);
            //tarminal.conf = {connection: false, server: null, url: ""};
            header.querySelector(".tarm-btn").classList.remove("open");
            setInputFlg(false);
            //alert(`${tarminal.conf.url} dis connected!`);
          }
        }
      });

      (init=()=>{
        tarminal.conf = {connection: false, server: null, url: ""};
        addText(getPrefix());
        setCommitCursor( getCursor() );
        setInputFlg(false);
      })();
    };

    createTarminal = (dom, pos='beforeend')=>{
      const tarminal_str = `<div class="tarminal">
        <div class="tarm-header"><!--
          --><div class="tarm-menu drag_area">1</div><!--
          --><input type="text" class="tarm-url"/><!--
          --><input type="button" value="CONNECT" class="tarm-btn"/>
        </div>
        <div class="tarm-win" contenteditable=true></div>
        <div class="tarm-footer"><!--
          --><div class="tarm-text">please connect.</div>
        </div>
      </div>`;
      dom.insertAdjacentHTML(pos, tarminal_str);
      const tarminal = dom.lastElementChild;
      tarminal.querySelector(".tarm-url").value = "ws://localhost:5001/repl";
      setTerminalUI(tarminal);
      return tarminal;
    };

    component = document.querySelector(".Terminal:last-child");
    createTarminal(component);
    </script>
  </div>
</body>
