/*
* REPL Server Connection
*/

const COMMAND_LOG = true; // ログ出力
const bgf_color = (bg='white',f='black')=>`color:${f};background-color:${bg};`;
const output_log = (target=null, style=bgf_color("#335","#DDE"))=>{
  if(typeof target==='object') target = JSON.stringify(target);
  console.log(`%c${target}`, style);
};

const str_var = str=>(new Function("return " + str))(); // ただの文字列をJSに変換
const remove_prompt = m=>{ // プロンプト用の出力削除
  m = m.split("\n"); m.pop(); m = m.join("\n");
  return str_var(m);
};

const importHtml = server=>{ // ScapeNodeのhtmlクライアント
  return async (path, args=null, dom=document.querySelector("#main"))=>{ // NodeのPathから取り込み
    if(!dom) return null;
    const root = path.split("/").shift();
    const _path = path.split("/").slice(1).join("/");
    await server.ask(`checkin("${root}");`);
    await server.ask(`change("${_path}");`);
    const el_str = await server.ask(`catenate();`);
    dom.insertAdjacentHTML('beforeend', el_str);

    const import_dom = dom.lastElementChild;
    import_dom.var = {args: args}; //読み込み時のパラメータ
    for(let script of import_dom.querySelectorAll("script")){ // innerHTMLでは実行されない為js再配置
      var new_script = document.createElement('script');
      new_script.innerHTML = script.innerHTML;
      script.parentElement.insertBefore(new_script, script);
      script.parentElement.removeChild(script);
    }
    return !import_dom? false: import_dom;
  };
};

const getReplServer = async host=>{
  server = new WebSocket(`ws://${host}/repl`);
  server.connect = host=>{ server = new WebSocket(`ws://${host}/repl`); };
  server.ask = async q=>{
    if(server.readyState != 1) server.connect(host);
    server.send(q);
    if(COMMAND_LOG) output_log(`$ ${q}`);
    return await new Promise((res,rej)=>{
      server.onmessage = function(e){
        m = remove_prompt(e.data);
        if(typeof m!=='undefined'){
          if(COMMAND_LOG) output_log(m);
          res(m);
        }
      };
    });
  };
  server.importHtml = importHtml(server);
  return server;
};
